// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "PacketStatistic.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

#include "PacketDigest.h"
#include "classifier.h"

namespace {

const ::google::protobuf::Descriptor* CPacketStatistic_descriptor_ = NULL;

}  // namespace

ResultEnum CPacketStatistic::AddPacketInfo(const CPacketDigest* pDigest)
{
	ResultEnum rs = eOK;
	unsigned int size = pDigest->getPacketSize();
	++packetnumber_;
	trafficvolume_ += size;
	u_short classfication = pDigest->getProtocolClassification();
	// If it is p2p packet 
	if (CClassifier::IsP2P(classfication))
	{
		p2ppacketnumber_++;
		p2ptrafficvolume_ += size;
	}
	// If it is http packet and not p2p, then 
	//else if (CClassifier::isHTTP(classfication))
	//{
	//	httppacketnumber_++;
	//	httptrafficvolume_ += size;
	//}
	
	// TODO: need more implementation here
	return rs;
}

void proto_BuildDescriptors_PacketStatistic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  const ::google::protobuf::FileDescriptor* file = pool->InternalBuildGeneratedFile(
    "\n\025PacketStatistic.proto\"\355\002\n\020CPacketStati"
    "stic\022\024\n\014packetNumber\030\001 \002(\006\022\025\n\rtrafficVol"
    "ume\030\002 \002(\006\022\031\n\021emptyPacketNumber\030\003 \002(\006\022\027\n\017"
    "tcpPacketNumber\030\004 \002(\006\022\030\n\020tcpTrafficVolum"
    "e\030\005 \002(\006\022\027\n\017udpPacketNumber\030\006 \002(\006\022\030\n\020udpT"
    "rafficVolume\030\007 \002(\006\022\027\n\017p2pPacketNumber\030\010 "
    "\002(\006\022\030\n\020p2pTrafficVolume\030\t \002(\006\022\030\n\020httpPac"
    "ketNumber\030\n \002(\006\022\031\n\021httpTrafficVolume\030\013 \002"
    "(\006\022 \n\030unidentifiedPacketNumber\030\014 \002(\006\022!\n\031"
    "unidentifiedTrafficVolume\030\r \002(\006", 391);
  CPacketStatistic_descriptor_ = file->message_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPacketStatistic_descriptor_, &CPacketStatistic::default_instance());
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PacketStatistic_2eproto {
  StaticDescriptorInitializer_PacketStatistic_2eproto() {
    proto_BuildDescriptors_PacketStatistic_2eproto();
  }
} static_descriptor_initializer_PacketStatistic_2eproto_;


// ===================================================================

const CPacketStatistic CPacketStatistic::default_instance_;














const int CPacketStatistic::_offsets_[13] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, packetnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, trafficvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, emptypacketnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, tcppacketnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, tcptrafficvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, udppacketnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, udptrafficvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, p2ppacketnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, p2ptrafficvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, httppacketnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, httptrafficvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, unidentifiedpacketnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPacketStatistic, unidentifiedtrafficvolume_),
};

CPacketStatistic::CPacketStatistic()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    packetnumber_(GOOGLE_ULONGLONG(0)),
    trafficvolume_(GOOGLE_ULONGLONG(0)),
    emptypacketnumber_(GOOGLE_ULONGLONG(0)),
    tcppacketnumber_(GOOGLE_ULONGLONG(0)),
    tcptrafficvolume_(GOOGLE_ULONGLONG(0)),
    udppacketnumber_(GOOGLE_ULONGLONG(0)),
    udptrafficvolume_(GOOGLE_ULONGLONG(0)),
    p2ppacketnumber_(GOOGLE_ULONGLONG(0)),
    p2ptrafficvolume_(GOOGLE_ULONGLONG(0)),
    httppacketnumber_(GOOGLE_ULONGLONG(0)),
    httptrafficvolume_(GOOGLE_ULONGLONG(0)),
    unidentifiedpacketnumber_(GOOGLE_ULONGLONG(0)),
    unidentifiedtrafficvolume_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

CPacketStatistic::CPacketStatistic(const CPacketStatistic& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    packetnumber_(GOOGLE_ULONGLONG(0)),
    trafficvolume_(GOOGLE_ULONGLONG(0)),
    emptypacketnumber_(GOOGLE_ULONGLONG(0)),
    tcppacketnumber_(GOOGLE_ULONGLONG(0)),
    tcptrafficvolume_(GOOGLE_ULONGLONG(0)),
    udppacketnumber_(GOOGLE_ULONGLONG(0)),
    udptrafficvolume_(GOOGLE_ULONGLONG(0)),
    p2ppacketnumber_(GOOGLE_ULONGLONG(0)),
    p2ptrafficvolume_(GOOGLE_ULONGLONG(0)),
    httppacketnumber_(GOOGLE_ULONGLONG(0)),
    httptrafficvolume_(GOOGLE_ULONGLONG(0)),
    unidentifiedpacketnumber_(GOOGLE_ULONGLONG(0)),
    unidentifiedtrafficvolume_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

CPacketStatistic::~CPacketStatistic() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CPacketStatistic::descriptor() {
  if (CPacketStatistic_descriptor_ == NULL) proto_BuildDescriptors_PacketStatistic_2eproto();
  return CPacketStatistic_descriptor_;
}

CPacketStatistic* CPacketStatistic::New() const {
  return new CPacketStatistic;
}

const ::google::protobuf::Descriptor* CPacketStatistic::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
CPacketStatistic::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* CPacketStatistic::GetReflection() {
  return &_reflection_;
}
