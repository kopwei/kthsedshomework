// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_flowcollection_2eproto__INCLUDED
#define PROTOBUF_flowcollection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "flow.pb.h"

// Internal implementation detail -- do not call this.
void protobuf_BuildDesc_flowcollection_2eproto();

class flow_collection;

// ===================================================================

class flow_collection : public ::google::protobuf::Message {
 public:
  flow_collection();
  virtual ~flow_collection();
  
  flow_collection(const flow_collection& from);
  
  inline flow_collection& operator=(const flow_collection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const flow_collection& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  flow_collection* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .flow_t flow = 1;
  inline int flow_size() const;
  inline void clear_flow();
  inline const ::google::protobuf::RepeatedPtrField< ::flow_t >& flow() const;
  inline ::google::protobuf::RepeatedPtrField< ::flow_t >* mutable_flow();
  inline const ::flow_t& flow(int index) const;
  inline ::flow_t* mutable_flow(int index);
  inline ::flow_t* add_flow();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::flow_t > flow_;
  friend void protobuf_BuildDesc_flowcollection_2eproto();
  static const flow_collection default_instance_;
  static const int _offsets_[1];
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// flow_collection

// repeated .flow_t flow = 1;
inline int flow_collection::flow_size() const {
  return flow_.size();
}
inline void flow_collection::clear_flow() {
  flow_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::flow_t >&
flow_collection::flow() const {
  return flow_;
}
inline ::google::protobuf::RepeatedPtrField< ::flow_t >*
flow_collection::mutable_flow() {
  return &flow_;
}
inline const ::flow_t& flow_collection::flow(int index) const {
  return flow_.Get(index);
}
inline ::flow_t* flow_collection::mutable_flow(int index) {
  return flow_.Mutable(index);
}
inline ::flow_t* flow_collection::add_flow() {
  return flow_.Add();
}

#endif  // PROTOBUF_flowcollection_2eproto__INCLUDED
